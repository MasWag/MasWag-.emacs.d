#+HUGO_BASE_DIR: ../doc/
#+TITLE: My Emacs Configuration
#+AUTHOR: Masaki Waga
#+LANGUAGE: en
#+STARTUP: overview

This file explains my GNU Emacs configuration.

#+BEGIN_SRC elisp
  (use-package ox-hugo
    :ensure t)
  (require 'ox-hugo)
#+END_SRC

#+RESULTS:
: ox-hugo

#+NAME: ENSURE_INSTALLATION
#+BEGIN_SRC elisp
    :ensure t
#+END_SRC

* COMMENT On the appearance
:PROPERTIES:
:EXPORT_FILE_NAME: appearance
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

#+BEGIN_SRC elisp :tangle ./inits/10-appearance.el :noweb yes
; server start for emacs-client
(require 'server)
(unless (server-running-p)
  (server-start))

;; add /usr/local/bin to PATH if not
(if (not (string-match "\\(^\\|:\\)/usr/local/bin\\($\\|\\:\\)" (getenv "PATH")))
    (setenv "PATH" (concat '"/usr/local/bin:" (getenv "PATH"))))
;; the same thing for exec-path
(if (not (member "/usr/local/bin" exec-path))
    (setq exec-path (cons "/usr/local/bin" exec-path)))
;; References
; - https://flex.phys.tohoku.ac.jp/texi/eljman/eljman_220.html
; - https://flex.phys.tohoku.ac.jp/texi/eljman/eljman_60.html
; - https://ayatakesi.github.io/emacs/24.5/elisp_html/Sets-And-Lists.html

;;背景色の設定
( when window-system
  (custom-set-faces
   '(default ((t
	       (:background "#000040" :foreground "#e0e0e0")
	       )))
   '(cursor ((((class color)
	       (background dark))
	      (:background "#00AA00"))
	     (((class color)
	       (background light))
	      (:background "#999999"))
	     (t ())
	     ))))

;; フレーム透過設定
(add-to-list 'default-frame-alist '(alpha . (0.80 0.80)))
;; tool-barを消す
(tool-bar-mode 0)

;; C-h でbackspaceにする
(global-set-key "\C-h" 'delete-backward-char)

;; 括弧を強調表示
(show-paren-mode t)

;; IMEの設定
(define-key global-map [zenkaku-hankaku] 'toggle-input-method)
;; 変換キーでIME ON
(define-key global-map [henkan]
  (lambda ()
    (interactive)
    (if current-input-method (deactivate-input-method))
    (toggle-input-method)))

;; 無変換キーでIME OFF
(define-key global-map [muhenkan]
  (lambda ()
    (interactive)
    (if current-input-method (deactivate-input-method))))

;; iedit
(global-set-key [?\C-;] 'iedit-mode)

(global-set-key "\C-xc" 'compile)
(setq-default indent-tabs-mode nil)

(display-time-mode 1)

;; skk
(setq default-input-method "japanese-skk")
#+END_SRC

** TODO Start emacs server to run =emacsclient=

** TODO Configure the background color

** TODO Do not show tool-bar

** TODO Use C-h for backspace

* COMMENT C/C++
:PROPERTIES:
:EXPORT_FILE_NAME: c-lang
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

The following is the entire configuration for C/C++

#+BEGIN_SRC elisp :tangle ./inits/40-C.el :noweb yes
;;; 40-C.el --- Configuration for C/C++
;;; Commentary:
;;; Code:
(use-package irony
  :commands irony-mode
  :config
  (custom-set-variables '(irony-additional-clang-options '("-std=c++17")))
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  (add-hook 'irony-mode-hook #'irony-eldoc)
  (add-hook 'c-mode-common-hook 'irony-mode))

(provide '40-C)
;;; 40-C.el ends here
#+END_SRC

** Irony



*** https://github.com/Sarcasm/irony-mode/wiki/Mac-OS-X-issues-and-workaround


* leaf.el

I am recently started switching from [[https://github.com/jwiegley/use-package][use-package]] to [[https://github.com/conao3/leaf.el][leaf.el]] because leaf.el is more modern, it seems leaf.el is better maintained, and recently, main people writes their configurations with leaf.el. The configuration is taken from [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7][this]] Qiita article.

The following is the whole configuration.

#+BEGIN_SRC elisp :tangle ./inits/10-leaf.el :noweb yes
  ;;; 10-leaf.el --- Configuration for leaf.el
  ;;; Commentary:
  ;;; Code:
  (leaf leaf-keywords
        :ensure t
        :init
        ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
        (leaf hydra :ensure t)
        (leaf el-get :ensure t)
        (leaf blackout :ensure t)
  
        :config
        ;; initialize leaf-keywords.el
        (leaf-keywords-init))
  
  (leaf leaf
        :config
        (leaf leaf-convert :ensure t)
        (leaf leaf-tree
              :ensure t
              :custom ((imenu-list-size . 30)
                       (imenu-list-position . 'left))))
  
  (leaf macrostep
        :ensure t
        :bind (("C-c e" . macrostep-expand)))
  (provide '10-leaf)
  ;;; 10-leaf.el ends here
#+END_SRC

* ace-window
:PROPERTIES:
:EXPORT_FILE_NAME: ace-window
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

[[https://github.com/abo-abo/ace-window][ace-window]] allows us to switch between the buffers quickly.

The following is the whole configuration.

#+BEGIN_SRC elisp :tangle ./inits/20-ace-window.el :noweb yes
  ;;; 20-ace-window.el --- Configuration for ace-window
  ;;; Commentary:
  ;;; Code:
  (use-package ace-window
    <<ENSURE_INSTALLATION>>
    :custom
    <<ACE_WINDOW_KEYS>>
    :bind (<<ACE_WINDOW_BIND>>)
    :custom-face
    (aw-leading-char-face ((t (:height 4.0 :foreground "#f1fa8c")))))
  (provide '20-ace-window)
  ;;; 20-ace-window.el ends here
#+END_SRC

We invoke ace-jump by =C-c w=.

#+NAME: ACE_WINDOW_BIND
#+BEGIN_SRC elisp
("C-c w" . ace-window)
#+END_SRC

Ace-window assigns one of the following characters to each buffer, and we can jump to the buffer by typing it.

#+NAME: ACE_WINDOW_KEYS
#+BEGIN_SRC elisp
(aw-keys '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
#+END_SRC

* Docker
:PROPERTIES:
:EXPORT_FILE_NAME: docker
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

Here is the configuration for docker, mainly to write Dockerfile.

#+BEGIN_SRC elisp :tangle ./inits/40-Docker.el :noweb yes
  ;;; 40-Docker.el --- Configuration for Docker
  ;;; Commentary:
  ;;; Code:
  (leaf dockerfile-mode
    :ensure t
    :require t)
  (leaf docker
    :ensure t
    :require t)
  (provide '40-Docker)
  ;;; 40-Docker.el ends here
#+END_SRC

** dockerfile-mode

** docker

** flycheck

#+BEGIN_SRC sh
brew install hadolint
#+END_SRC

#+RESULTS:

* OCaml
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

#+BEGIN_SRC elisp :noweb yes :tangle ./inits/40-OCaml.el
;;; 40-OCaml.el --- Configuration for OCaml
;;; Commentary:
;;; Code:
<<TUAREG>>
<<MERLIN>>
<<UTOP>>
<<OCAML_FLYCHECK>>
;;; 40-OCaml.el ends here
#+END_SRC

** Set up Tuareg

#+NAME: TUAREG
#+BEGIN_SRC elisp
  (use-package tuareg
    :ensure t
    :hook (tuareg-mode . electric-pair-local-mode)
    ;; (add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
    :mode (("\\.ml[ily]?$" . tuareg-mode)
           ("\\.topml$" . tuareg-mode)))
#+END_SRC

** Set up Merlin

#+NAME: MERLIN
#+BEGIN_SRC elisp
  (use-package merlin
    :ensure t
    :after (company tuareg)
    :hook ((tuareg-mode . merlin-mode)
           (merlin-mode . company-mode))
    :config
    (setq merlin-error-after-save nil))
#+END_SRC

** Set up utop

#+NAME: UTOP
#+BEGIN_SRC elisp
  (use-package utop
    :ensure t
    :after tuareg
    :config
    ;; (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    :hook (tuareg-mode . utop-minor-mode))
#+END_SRC

** Set up flycheck

#+NAME: OCAML_FLYCHECK
#+BEGIN_SRC elisp
  (use-package flycheck-ocaml
    :ensure t  
    :after (flycheck merlin)
    :init
    (flycheck-add-mode 'ocaml-merlin merlin-mode))
#+END_SRC
* F*
:PROPERTIES:
:EXPORT_FILE_NAME: fstar
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

#+BEGIN_SRC elisp :noweb yes :tangle ./inits/40-FStar.el
  ;;; 40-FStar.el --- Configuration for F*
  ;;; Commentary:
  ;;; Code:
  (use-package fstar-mode
    :ensure t
    :mode (("\\.fst$" . fstar-mode)))
  ;;; 40-FStar.el ends here
#+END_SRC


* PlantUML mode
:PROPERTIES:
:EXPORT_FILE_NAME: plantuml
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

Here, we configure the major mode for [[https://plantuml.com/en/][PlantUML]], which is an open-source tool to write UML in plain text.

- GitHub :: https://github.com/skuro/plantuml-mode

References 
- https://github.com/tsu-nera/dotfiles/blob/master/.emacs.d/inits/33_minorlang.org
- https://skoji.jp/blog/2020/01/plantuml.html
- https://joppot.info/2017/10/30/4091

#+BEGIN_SRC elisp :tangle ./inits/40-PlantUML.el :noweb yes
  ;;; 40-PlantUML ---  Setting for PlantUML
  ;;; Commentary:

  ;;; Code:
  (use-package plantuml-mode
    <<ENSURE_INSTALLATION>>
    :commands plantuml-mode
    <<PLANTUML_MODE>>
    :config
    <<PLANTUML_CONFIG>>
    )
  (provide '40-PlantUML)
  ;;; 40-PlantUML.el ends here
#+END_SRC  

** Configure =auto-mode-alist=

#+NAME: PLANTUML_MODE
#+BEGIN_SRC elisp
  :mode (("\\.pu$" . plantuml-mode)
         ("\\.plantuml$" . plantuml-mode)
         ("\\.puml$" . plantuml-mode))
#+END_SRC


** Other Configurations on PlantUML
  :PROPERTIES:
  :header-args: :noweb-ref PLANTUML_CONFIG
  :END:

#+BEGIN_SRC elisp
  (setq plantuml-default-exec-mode 'executable)
  (cond ((equal (system-name) "MacBook-Pro-3.local")
         (setq plantuml-executable-path "/usr/local/bin/plantuml")
         (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2021.10/libexec/plantuml.jar")
         (setq plantuml-jar-path "/usr/local/Cellar/plantuml/1.2021.10/libexec/plantuml.jar")))
#+END_SRC


#+BEGIN_SRC elisp
  (setq plantuml-jar-args "-charset UTF-8")
#+END_SRC

* lua
:PROPERTIES:
:EXPORT_FILE_NAME: lua
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

Here, we configure the major mode for lua.

The following shows the outline of the configuration.

#+BEGIN_SRC elisp :tangle ./inits/40-lua.el :noweb yes
  ;;; 40-lua ---  Setting for lua
  ;;; Commentary:

  ;;; Code:
  (use-package lua-mode
    <<ENSURE_INSTALLATION>>
    :commands lua-mode
    <<LUA_MODE>>
    )
  (provide '40-lua)
  ;;; 40-lua.el ends here
#+END_SRC  

** Configure =auto-mode-alist=

We use lua-mode for the files with =.lua=

#+NAME: LUA_MODE
#+BEGIN_SRC elisp
  :mode (("\\.lua" . lua-mode))
#+END_SRC


** COMMENT Other Configurations on lua
  :PROPERTIES:
  :header-args: :noweb-ref LUA_CONFIG
  :END:

#+BEGIN_SRC elisp
  (setq plantuml-default-exec-mode 'executable)
  (cond ((equal (system-name) "MacBook-Pro-3.local")
         (setq plantuml-executable-path "/usr/local/bin/plantuml")
         (setq plantuml-jar-path "/usr/local/Cellar/plantuml/1.2021.0/libexec/plantuml.jar")))
#+END_SRC


#+BEGIN_SRC elisp
  (setq plantuml-jar-args "-charset UTF-8")
#+END_SRC


* Apache

Here, we configure the major mode for the configuration files of Apache.

#+BEGIN_SRC elisp :tangle ./inits/40-apache.el :noweb yes
  ;;; 40-apache ---  Setting for Apache
  ;;; Commentary:
  
  ;;; Code:
  (leaf apache-mode
    <<ENSURE_INSTALLATION>>
    :commands apache-mode
    :require t
    )
  (provide '40-apache)
  ;;; 40-apache.el ends here
#+END_SRC

* gnuplot
:PROPERTIES:
:EXPORT_FILE_NAME: gnuplot
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :toc true
:END:

Here, we configure the major mode for gnuplot.

The following shows the outline of the configuration.

#+BEGIN_SRC elisp :tangle ./inits/40-gnuplot.el :noweb yes
  ;;; 40-gnuplot ---  Setting for gnuplot
  ;;; Commentary:

  ;;; Code:
  (leaf gnuplot-mode
    <<ENSURE_INSTALLATION>>
    <<GNUPLOT_MODE>>
    )
  (provide '40-gnuplot)
  ;;; 40-gnuplot.el ends here
#+END_SRC

** Configure =auto-mode-alist=

We use gnuplot-mode for the files with =.plt=

#+NAME: GNUPLOT_MODE
#+BEGIN_SRC elisp
  :mode ("\\.plt")
#+END_SRC
* org-pomodoro

Pomodoro technique in org-mode

#+BEGIN_SRC elisp
  (use-package org-pomodoro
    :ensure t
    :after org-agenda
    :custom
    (org-pomodoro-ask-upon-killing t)
    (org-pomodoro-format "%s")
    (org-pomodoro-short-break-format "%s")
    (org-pomodoro-long-break-format  "%s")
    :custom-face
    (org-pomodoro-mode-line ((t (:foreground "#ff5555"))))
    (org-pomodoro-mode-line-break   ((t (:foreground "#50fa7b"))))
    :hook
    ;; (org-pomodoro-started . (lambda () (notifications-notify
    ;;                                     :title "org-pomodoro"
    ;;                                     :body "Let's focus for 25 minutes!"
    ;;                                     :app-icon "~/.emacs.d/img/001-food-and-restaurant.png")))
    ;; (org-pomodoro-finished . (lambda () (notifications-notify
    ;;                                      :title "org-pomodoro"
    ;;                                      :body "Well done! Take a break."
    ;;                                      :app-icon "~/.emacs.d/img/004-beer.png")))
    (org-pomodoro-started . (lambda () (message "Let's focus for 25 minutes!")))
    (org-pomodoro-finished . (lambda () (message "Well done! Take a break.")))
    :config
    :bind (:map org-agenda-mode-map
                ("p" . org-pomodoro)))
#+END_SRC

#+RESULTS:

* emojify

#+BEGIN_SRC elisp :tangle ./inits/50-emojify.el
  (leaf emojify
    :ensure t
    :if (display-graphic-p)
    :hook (after-init . global-emojify-mode))
#+END_SRC
